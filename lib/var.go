package lib

import (
	"go/ast"

	"golang.org/x/tools/go/packages"
)

type (
	meta struct {
		apis     []APIMeta
		structs  map[string]*ast.StructType
		packages []*packages.Package

		libName string
		libPath string
	}

	APIMeta struct {
		FuncName   string
		ParamsType string
		RespType   string
		Method     string
		Path       string
	}
)

const (
	FILE_OUTPUT_NAME          = "api_generated.go"
	OPEN_API_FILE_OUTPUT_NAME = "openapi.json"
	FLAG_COMMENT_API          = "//goge:api "
	TAG_HEADER                = "gogeHeader"
	TAG_QUERY                 = "gogeQuery"
	TAG_URL                   = "gogeUrl"
	VAR_SET_HEADER            = `
	req.%s = c.Get("%s")`
	VAR_SET_QUERY = `
	req.%s = c.Query("%s")`
	VAR_SET_QUERY_INT = `
	req.%s = c.QueryInt("%s")`
	VAR_SET_QUERY_FLOAT = `
	req.%s = c.QueryFloat("%s")`
	VAR_SET_QUERY_BOOL = `
	req.%s = c.QueryBool("%s")`
	VAR_SET_URL = `
	req.%s = c.Params("%s")`
	FUNC_HANDLER_SET = `
	app.Add("%s", "%s", %sHandler)`
	IMPORT_HEADER = `
// Code generated by goge; DO NOT EDIT.

package %s
import (
	"github.com/gofiber/fiber/v2"
)`
	RETURN_JSON = `

	res, err := %s(c, req)
	if err != nil {
		return err
	}
	
	return c.JSON(res)`
	MAIN_FUNCTION_ROUTER = `
func GogeRouter() *fiber.App {
	app := fiber.New()
	%s

	return app
}`
	HANDLER_FUNCTION_END   = "}\n"
	HANDLER_FUNCTION_START = `
func %sHandler(c *fiber.Ctx) error {
	req := new(%s)
`
	HANDLER_BODY_FUNCTION_START = `
func %sHandler(c *fiber.Ctx) error {
	req := new(%s)
	if err := c.BodyParser(req); err != nil {
		return c.Status(fiber.StatusBadRequest).SendString("Invalid request body")
	}
`
)
